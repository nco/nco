$Header$ -*-text-*-

netCDF Operators NCO version 5.3.4 stick the landing

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nco/nco (Source Code, Issues, Releases)

What's new?
Version 5.3.4 contains of bevy of minor features that improve
NCO in many different areas. These range from reduced monotonicity
WARNINGs from ncrcat, to an easy new method for all operators
to remove global attributes, to bulletproofing ncclimo to work
as intended with instantaneous input, to new urban landunit
diagnostics in ncks.

Skip this release if these changes do not interest you. 

Time machine:
The first public release of ncrename was June 14, 1995:
https://www.unidata.ucar.edu/mailing_lists/archives/netcdfgroup/1995/msg00076.html
Happy 30th birthday ncrename!!!

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. All operators can now delete user-specified global attributes.
The option --gad=att1,att2,...,attN (or long-option equivalent
--glb_att_del=att1,att2,...,attN) deletes (rather than adds, like its
sister option --gaa) global attributes in an output file.
Global attribute deletion requires only the name of the global
attribute without any further information, so the argument to the
option is simply a comma-separated list of all attributes to delete.
No information about the attributes' types, sizes, or values need be given.
The option works on attributes of all types, sizes, and values.

ncks --gad=history_of_appended_files,nco_openmp_thread_number,\
           input_file,map_file,remap_version,remap_hostname,\
           remap_command,remap_script,NCO in.nc out.nc

The global attribution deletion feature helps to avoid the performance
penalty incurred by using @command{ncatted} separately to annotate
large files.  
http://nco.sf.net/nco.html#gad
http://nco.sf.net/nco.html#gaa

B. ncrcat no longer performs monotonicity checks on CF bounds
variables (which are never monotonic). This eliminates a lot
of noisy monotonicity WARNINGs from many datasets.
http://nco.sf.net/nco.html#ncrcat

C. ncks --is_var var_nm is a new option that checks whether the
single variable var_nm is a ``horizontal variable''.
In this context, horizontal variables means single-level variables
that have horizontal dimensions (e.g., lat and lon) yet no
vertical dimension and no other dimensions except possibly the
temporal dimension (time). ncks prints "Yes" or "No" and then exits.
This capability helps ncclimo determine whether a variable is
suitable for creating a regional average timeseries from.
Due to this context, coordinate variables (including latitude and
longitude) are not identified as horiztonal variables.
Furthermore, variables identified as horizontal may only have two
or three dimensions, and those dimensions must be in this list:
lat, lon, ncol, nCells, time, and Time.

zender@spectral:~$ ncks --is_hrz three_dmn_rec_var ~/nco/data/in.nc
Yes
zender@spectral:~$ ncks --is_hrz one ~/nco/data/in.nc
No
zender@spectral:~$ 

The E3SM-centric list of allowed dimension names is only a starting point!
Please contact Charlie if you would like this list expanded.
http://nco.sf.net/nco.html#is_hrz

D. ncclimo can now infer the timesteps per day (tpd) to use for
high-frequency instantaneous (in the CF sense) data that lack a
CF temporal bounds variable. ncclimo also uses tpd to help it
discover how many days-per-file there are. Nevertheless, the metadata
in the ncclimo output may be more accurate if the input data contains
a temporal bounds variable.

E. The ncks S1D functionality that "gridifies" ELM/CTSM data has
new features to aggregate and report Urban landunit characteristics.
First, the new S1D option "--rgr lut_out=789" stores the area-weighted
mean of the three Urban landunit types (7, 8, and 9) in the output
for every variable in a restart file that is defined on columns.

ncks --s1d --rgr lut_out=789 --hrz=hst.nc rst.nc s1d.nc # Avg Urban

Second, the frc_column diagnostic variable stores the subtotal of
the three Urban landunits areas in (C-based) index 15 of output files
with MECs, and in index 5 of output files without MECs. Users can now
easily assess the total fraction of a gridcell that is Urban. 
http://nco.sf.net/nco.html#s1d
http://nco.sf.net/nco.html#frc_column

F. ncks now inserts line-breaks in NC_STRING-valued text when it
encounters a C-format carriage return "\n". Now printing text
stored as NC_STRING and as NC_CHAR has the same appearance.
This makes it easier to read "history" global attributes that are
stored as NC_STRING:

ncap2 -O -4 -h -s 'global@history="Previous history"s' ~/foo.nc
ncap2 -O -s 'one=1' ~/foo.nc ~/foo.nc
ncks -M ~/foo.nc # NC_STRING history is now more legible

http://nco.sf.net/nco.html#ncks
http://nco.sf.net/nco.html#history

G. ncremap has deprecated the use of the "--alg_typ=tempest"
regridding algorithm value.
This algorithm name simply meantthat NCO invoked the TempestRemap
(TR) regridder with all default choices, i.e., with no options.
However, the default TR algorithm is rarely employed anymore, and many
users misinterpreted the meaning of "tempest". 
Instead of supplying ncremap with their own options, they
received the default, which usually was sub-optimal. We encourage
users to migrate to the appropriate and specifically-named TR
algorithms such as "fv2fv_flx", "traave", "trfv2", etc.
http://nco.sf.net/nco.html#alg_typ

BUG FIXES:
   
A. Fixed recent regression with ncrcat on hieraarchical files.
The symptom is this message: " ERROR: nco_inq_varname() reports
specified dataset ... has no variable ID 2". This problem was
introduced sometime around NCO 5.3.3. There is no workaround.
The solution is to upgrade.

Full release statement at http://nco.sf.net/ANNOUNCE
    
KNOWN PROBLEMS DUE TO NCO:

This section of ANNOUNCE reports and reminds users of the
existence and severity of known, not yet fixed, problems. 
These problems occur with NCO 5.3.4 built/tested under
MacOS 15.5 with netCDF 4.10-development on HDF5 1.14.6
and with Linux FC42 with netCDF 4.9.2 on HDF5 1.14.4.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

